cmake_minimum_required(VERSION 3.25)

project(embed_opengl_shaders)

# Перечисляем все шейдерные файлы, которые хотим «зашить»:
# Можно жестко перечислить, а можно искать glob'ом. Ниже показан жесткий список.
set(SHADER_FILES
        "${CMAKE_CURRENT_LIST_DIR}/sprite.vert"
        "${CMAKE_CURRENT_LIST_DIR}/sprite.frag"
        # Добавьте сюда остальные шейдеры по необходимости
)

# Указываем, куда будем генерировать итоговый заголовок:
set(EMBEDDED_HEADER "${CMAKE_CURRENT_BINARY_DIR}/embedded_shaders.hpp")

# Будем аккумулировать текст для этого заголовка в переменной ALL_SHADER_CONTENTS
set(ALL_SHADER_CONTENTS "")

# Перебираем каждый .vert/.frag, читаем в строку и экранируем спецсимволы
foreach(SHADER_PATH IN LISTS SHADER_FILES)
    # Считываем файл в переменную CUR_SHADER
    file(READ "${SHADER_PATH}" CUR_SHADER)

    # Экранируем обратные слэши и кавычки:
    string(REPLACE "\\" "\\\\" CUR_SHADER "${CUR_SHADER}")
    string(REPLACE "\"" "\\\"" CUR_SHADER "${CUR_SHADER}")

    # Заменим переводы строк на \n" + перенос (для удобства чтения).
    # Теоретически можно оставить всё в одну строку, но так понятнее.
    string(REPLACE "\n" "\\n\"\n\"" CUR_SHADER "${CUR_SHADER}")

    # Получаем имя файла (без расширения) и само расширение, чтобы отличать vert/frag
    get_filename_component(FILE_NAME "${SHADER_PATH}" NAME_WE) # напр. "sprite"
    get_filename_component(FILE_EXT  "${SHADER_PATH}" EXT)     # напр. ".vert" или ".frag"

    # Уберём точку у расширения: ".vert" -> "vert"
    string(REPLACE "." "" FILE_EXT "${FILE_EXT}")  # "vert" или "frag"

    # Собираем имя переменной в формате k_sprite_vert / k_sprite_frag
    set(VAR_NAME "k_${FILE_NAME}_${FILE_EXT}")

    # Добавляем в общую строку код вида:
    # static const char* k_sprite_vert = "....";
    set(ALL_SHADER_CONTENTS
            "${ALL_SHADER_CONTENTS}\n\nstatic const char* ${VAR_NAME} = \"${CUR_SHADER}\";\n"
    )
endforeach()

# Генерируем конечный файл embedded_shaders.hpp:
file(WRITE "${EMBEDDED_HEADER}"
        "// Auto-generated by CMake. Do not edit manually.\n
#pragma once\n
${ALL_SHADER_CONTENTS}
        ")

# Создаём «пустую» цель, чтобы CMake отслеживал зависимость сборки
add_custom_target(EmbedOpenGLShadersHeader ALL
        DEPENDS "${EMBEDDED_HEADER}"
        COMMENT "Embedding OpenGL shaders into a header"
)
